

from aiogram import Bot, Dispatcher
from aiogram.filters import Text, Command
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove

import asyncio
import re

import database
import structure

print('Hello, world')
asyncio.sleep(10)

import avito
import ula
import cian
import mirkvartir

# –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã

chat_id: int = -898776545
admins: list = [5663715194, 1132908805]
bot: Bot = Bot('6098152249:AAHvObNBSEzcuEDnzIeZp_wZJKCg4XvwMF4')
dp: Dispatcher = Dispatcher()
root = ['–¶–∏–∞–Ω', '–Æ–ª–∞', "–ê–≤–∏—Ç–æ", '–ú–∏—Ä –ö–≤–∞—Ä—Ç–∏—Ä', '–Ø–Ω–¥–µ–∫—Å.–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å']

parce_loop = False
all_objects = []
nums = [str(i) for i in range(100)]


async def msg_new_obj(data, source):
    if source == 1:
        text = f"üìç–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç\n" \
               f"üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {root[source]}\n" \
               f"<a href = '{data['url']}'>{data['name']}</a>\n" \
               f"üíµ {data['price']}\n" \
               f"{data['id']}"
        return text

    text = f"üìç–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç\n" \
           f"üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {root[source]}\n" \
           f"<a href = '{data['url']}'>{data['name']}</a>\n" \
           f"üíµ {data['price']}\n" \
           f"üß≠ {data['address']}\n" \
           f"üìù {data['description'][:200]}...\n" \
           f"üìÜ {data['time']}\n" \
           f"{data['id']}"
    return text


async def parse():
    try:
        print('cringe')
        temps = [
            await cian.houses_source(),
            await cian.flats_source(),
            await ula.houses_source(),
            await ula.flats_source(),
            await avito.houses_source(),
            await avito.flats_source(),
            await mirkvartir.houses_source(),
            await mirkvartir.flats_source()
        ]

        all_data = [
            await cian.parse(temps[0]),
            await cian.parse(temps[1]),
            await ula.parse(temps[2]),
            await ula.parse(temps[3]),
            await avito.parse(temps[4]),
            await avito.parse(temps[5]),
            await mirkvartir.parse(temps[6]),
            await mirkvartir.parse(temps[7])
        ]

        notification = database.notif_users()
        print(notification)
        for i in range(6):
            data = all_data[i]
            if database.new_object(data['id'], root[i // 2], data['address'], data['name'], data['url']):
                msg_text = str(await msg_new_obj(data, i // 2))
                for user in notification[i // 2]:
                    try:
                        await bot.send_message(chat_id=user,
                                               text=msg_text,
                                               reply_markup=structure.take_work_button,
                                               parse_mode='HTML')
                    except:
                        continue
        await asyncio.sleep(300)
        await parse()
    except TypeError:
        await parse()
    except:

        await parse()


@dp.message(Command(commands=['start']))
async def process_start_command(msg: Message):
    print(msg.from_user.id)
    print(msg.from_user.username, msg.text)
    status = database.check_user(msg.from_user.id)

    if status == -1:
        await msg.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É', reply_markup=ReplyKeyboardRemove())
        return
    if status == 0:
        await msg.answer(text='–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞,'
                              ' —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ,'
                              ' –ø–æ–∂–∞–ª—É–π—Å—Ç–≤–∞ –≤–≤–¥–µ–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:')
        await msg.answer(text='–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω\n'
                              '+79161234567')
        return
    await msg.answer(text='–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞',
                     reply_markup=structure.mainkeys[status])


@dp.message(Command(commands=['parse']))
async def process_parse_command(message: Message):
    global parce_loop
    if not parce_loop:
        parce_loop = True
        await parse()
    print('no')


@dp.message(Text(text=['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']))
async def settings(message: Message):
    print(message.from_user.username, message.text)

    status = database.check_user(message.from_user.id)
    if status < 1:
        await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É', reply_markup=ReplyKeyboardRemove())
        return

    await message.answer(text='–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞:',
                         reply_markup=structure.make_settings(database.get('users', 'notif', message.from_user.id)))


@dp.message(Text(text=['ü§≥ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–∑–≤–æ–Ω–∞']))
async def get_phone(message: Message):
    print(message.from_user.username, message.text)

    status = database.check_user(message.from_user.id)
    if status < 1:
        await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É', reply_markup=ReplyKeyboardRemove())
        return
    temp = database.get_number()
    if temp == -1:
        await message.answer(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –æ–±–∑–≤–æ–Ω–∞")
        return
    temp = str(temp)
    print(temp)
    if temp[0] == '7':
        temp = '+' + temp
    await message.answer(text=f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É:\n{temp}")


@dp.message(Text(text=['üß≠ –í–∑—è—Ç—å—Å—è –∑–∞ –æ–±—ä–µ–∫—Ç –ø–æ —Å—Å—ã–ª–∫–µ']))
async def help(message: Message):
    print(message.from_user.username, message.text)

    status = database.check_user(message.from_user.id)
    if status < 1:
        await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É', reply_markup=ReplyKeyboardRemove())
        return
    database.set_func(message.from_user.id, 1)

    await message.answer(text='–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç')


@dp.message(Text(text=['üè¢ –ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã']))
async def profile(message: Message):
    print(message.from_user.username, message.text)
    global all_objects
    all_objects = database.all_work_ob()

    status = database.check_user(message.from_user.id)
    if status < 1:
        await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É', reply_markup=ReplyKeyboardRemove())
        return
    temp = database.get_user_ob(message.from_user.id)
    if not temp:
        await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ')
        return
    temp = temp[0]
    await message.answer(
        text=f"üîç –ù–∞–∑–≤–∞–Ω–∏–µ: {temp[3]}\n"
             f"üß≠ –ê–¥—Ä–µ—Å: {temp[2]}\n\n"
             f"üìù –ò—Å—Ç–æ—á–Ω–∏–∫: {temp[1]}\n"
             f"‚ñ∂Ô∏è <a href = '{temp[4]}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç</a>\n"
             f'<span class="tg-spoiler">{temp[0]}</span>',
        parse_mode='HTML',
        reply_markup=structure.set_page_but('0'))


@dp.message(Text(text=['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–∑–≤–æ–Ω–∞']))
async def new_phone(message: Message):
    print(message.from_user.username, message.text)
    status = database.check_user(message.from_user.id)
    if status < 2:
        await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', reply_markup=ReplyKeyboardRemove())
        return
    await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É')
    database.set_func(message.from_user.id, 2)


@dp.callback_query(Text(text=['cancel']))
async def cansel(callback: CallbackQuery):
    print(callback.from_user.username, callback.data)

    await callback.message.edit_text(text='‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ',
                                     reply_markup=structure.mainkeys[database.check_user(callback.from_user.id)])
    database.set_func(callback.from_user.id, 0)


@dp.callback_query(Text(text=nums))
async def next_object(callback: CallbackQuery):
    print(callback.from_user.username, callback.data)
    temp, now = database.pages(callback.from_user.id, callback.data)
    if not temp:
        await callback.message.edit_text(
            text=f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
        return
    await callback.message.edit_text(
        text=f"üîç –ù–∞–∑–≤–∞–Ω–∏–µ: {temp[3]}\n"
             f"üß≠ –ê–¥—Ä–µ—Å: {temp[2]}\n\n"
             f"üìù –ò—Å—Ç–æ—á–Ω–∏–∫: {temp[1]}\n"
             f"‚ñ∂Ô∏è <a href = '{temp[4]}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç</a>\n"
             f'<span class="tg-spoiler">{temp[0]}</span>',
        parse_mode='HTML',
        reply_markup=structure.set_page_but(now))


@dp.callback_query(Text(text=['-' + i for i in nums]))
async def prev_object(callback: CallbackQuery):
    print(callback.from_user.username, callback.data)
    temp, now = database.pages(callback.from_user.id, callback.data)
    if not temp:
        await callback.message.edit_text(
            text=f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
        return
    await callback.message.edit_text(
        text=f"üîç –ù–∞–∑–≤–∞–Ω–∏–µ: {temp[3]}\n"
             f"üß≠ –ê–¥—Ä–µ—Å: {temp[2]}\n\n"
             f"üìù –ò—Å—Ç–æ—á–Ω–∏–∫: {temp[1]}\n"
             f"‚ñ∂Ô∏è <a href = '{temp[4]}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç</a>\n"
             f'<span class="tg-spoiler">{temp[0]}</span>',
        parse_mode='HTML',
        reply_markup=structure.set_page_but(now))


@dp.callback_query(Text(text=['edit_obj']))
async def cansel(callback: CallbackQuery):
    print(callback.from_user.username, callback.data)
    await callback.message.edit_reply_markup(reply_markup=structure.obj_keys)


@dp.callback_query(Text(text=['delete_obj']))
async def cansel(callback: CallbackQuery):
    print(callback.from_user.username, callback.data)
    await callback.message.edit_text(text='‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—ä–µ–∫—Ç–∞')
    print(callback.message.text.split("\n")[-1])
    temp = database.delete_obj(callback.from_user.id, callback.message.text.split("\n")[-1])
    if not temp:
        return
    temp = temp[0]

    await bot.send_message(chat_id=chat_id,
                           text=
                           f'üìç –ê–≥–µ–Ω—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ–±—ä–µ–∫—Ç–æ–º\n\n'
                           f"üîç –ù–∞–∑–≤–∞–Ω–∏–µ: {temp[3]}\n"
                           f"üß≠ –ê–¥—Ä–µ—Å: {temp[2]}\n\n"
                           f'üôã‚Äç‚ôÇÔ∏è  {database.get("users", "name", callback.from_user.id)}\n'
                           f'üë§ +{database.get("users", "phone", callback.from_user.id)} @{callback.from_user.username}\n\n'
                           f"üìù –ò—Å—Ç–æ—á–Ω–∏–∫: {temp[1]}\n"
                           f"‚ñ∂Ô∏è <a href = '{temp[4]}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç</a>\n",
                           parse_mode='HTML')


@dp.callback_query(Text(text=root))
async def notif_turn_on(callback: CallbackQuery):
    print(callback.from_user.username, callback.data)

    status = database.check_user(callback.from_user.id)
    if status < 1:
        await callback.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É', reply_markup=ReplyKeyboardRemove())
        return
    temp = list(database.get('users', 'notif', callback.from_user.id))
    ind = root.index(callback.data)
    temp[ind] = ['1', '0'][int(temp[ind])]
    temp = ''.join(temp)

    await callback.message.edit_reply_markup(reply_markup=structure.make_settings(temp))
    await callback.answer(text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö –Ω–∞ {callback.data} {['–≤–∫–ª—é—á–µ–Ω—ã','–æ—Ç–∫–ª—é—á–µ–Ω—ã'][int(temp[ind])]}")
    database.edit_base(callback.from_user.id, 'users', 'notif', temp)


@dp.callback_query(Text(text=['take_work']))
async def take_work(callback: CallbackQuery):
    print(callback.from_user.username, callback.data)

    status = database.check_user(callback.from_user.id)
    if status < 1:
        await callback.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É', reply_markup=ReplyKeyboardRemove())
        return
    temp = database.get_object(callback.message.text.split('\n')[-1])
    if not temp:
        await callback.message.edit_text(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ\n–û–±—ä–µ–∫—Ç —É–∂–µ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É")
        return
    temp = database.get_work(callback.from_user.id, callback.message.text.split('\n')[-1])

    await callback.answer(text="–í—ã –Ω–∞–∑–Ω–∞—á–∞–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–∞ –¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç")
    await callback.message.edit_text(text=f"‚úÖ –í—ã –≤–∑—è–ª–∏—Å—å –∑–∞ –æ–±—ä–µ–∫—Ç \n{temp[4]}")
    await bot.send_message(chat_id=chat_id,
                           text=f"üìç –û–±—ä–µ–∫—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–æ–º: \nüôã‚Äç‚ôÇÔ∏è {database.get('users', 'name', callback.from_user.id)}\n"
                                f"üë§ +{database.get('users', 'phone', callback.from_user.id)} @{callback.from_user.username}\n"
                                f"\n"
                                f"üîç –ù–∞–∑–≤–∞–Ω–∏–µ: {temp[3]}\n"
                                f"üß≠ –ê–¥—Ä–µ—Å: {temp[2]}\n\n"
                                f"üìù –ò—Å—Ç–æ—á–Ω–∏–∫: {temp[1]}\n"
                                f"‚ñ∂Ô∏è <a href = '{temp[4]}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç</a>", parse_mode='HTML')


@dp.message()
async def message(message: Message):  #
    print(message.chat.id)
    print(message.from_user.username, message.from_user.id, message.text)

    user_id = message.from_user.id
    status = database.check_user(message.from_user.id)

    if message.chat.id == message.from_user.id:
        if status == -1:  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            return
        temp = message.text
        if status == 0:  # –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            temp = temp.split('\n')

            if len(temp) != 2 or len(temp[0].split()) != 2:
                await message.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö')
                return

            if not bool(re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$',
                                 temp[1])):
                await message.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
                return

            database.second_reg(user_id, message.from_user.username, temp[0], temp[1])
            await message.answer(text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', reply_markup=structure.mainmenu_1)
            return
        func = database.get('users', 'using', message.from_user.id)
        if func == 0:
            await message.answer(text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!',reply_markup=structure.mainkeys[status])
            return

        if status == 1:  # –æ–±—ã—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
            if func == 1:
                database.set_func(message.from_user.id, '0')

                if 'cian' in message.text:
                    obj_id = message.text.split('/')[-2]
                elif 'avito' in message.text:
                    obj_id = message.text.split('?')[0][-10:]
                elif 'trk.mail' in message.text:
                    obj_id = message.text.split('=')[-1]
                elif 'youla' in message.text:
                    obj_id = message.text[-24:]
                elif 'mirkvartir' in message.text:
                    obj_id = message.text.split('/')[-2]
                else:
                    obj_id = 0
                print(obj_id)
                temp = database.check_obj(obj_id)
                if temp:
                    if temp[0][-1] == message.from_user.id:
                        await message.answer(text='–í—ã —É–∂–µ –≤–∑—è–ª–∏—Å—å –∑–∞ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç')
                        return
                    await message.answer(
                        text=f"üìç –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç —É–∂–µ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–æ–º \nüôã‚Äç‚ôÇÔ∏è {database.get('users', 'name', temp[0][-1])}\n"
                             f"üë§ +{database.get('users', 'phone', temp[0][-1])} @{database.get('users', 'username', temp[0][-1])}")
                    return
                await bot.send_message(chat_id=chat_id,
                                       text=f"üìç –û–±—ä–µ–∫—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–æ–º: \nüôã‚Äç‚ôÇÔ∏è {database.get('users', 'name', message.from_user.id)}\n"
                                            f"üë§ +{database.get('users', 'phone', message.from_user.id)} @{message.from_user.username}\n"
                                            f"\n"
                                            f"‚ñ∂Ô∏è <a href = '{message.text}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç</a>",
                                       parse_mode='HTML')
                await message.answer(text='–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏—Å—å –∑–∞ –æ–±—ä–µ–∫—Ç')
                database.fast_work(obj_id, message.text, message.from_user.id)

        if status == 2:  # –∞–¥–º–∏–Ω
            if func == 2:  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤
                flag = False
                temp = message.text.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
                for number in temp.split('\n'):
                    if bool(re.match(
                            r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$',
                            number)):
                        print('g')
                        flag = True
                        database.new_number(number)

                if flag:
                    await message.answer(text="–ù–æ–º–µ—Ä(–∞) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω(—ã) –≤ –±–∞–∑—É", reply_markup=structure.mainmenu_2)
                    database.set_func(message.from_user.id, 0)

    else:
        database.first_reg(message.from_user.id)
        if message.left_chat_member:
            database.remove_user(message.left_chat_member.id)


if __name__ == '__main__':
    dp.run_polling(bot)  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
